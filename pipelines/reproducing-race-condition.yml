trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: JMETER_TERRAFORM_SETTINGS
- name: JMETER_DIRECTORY_INPUT
  value: $(System.DefaultWorkingDirectory)/jmeter
- name: JMETER_DIRECTORY_OUTPUT
  value: $(System.DefaultWorkingDirectory)/results
- name: TERRAFORM_VERSION
  value: 1.1.3

steps:

- task: AzureCLI@2
  displayName: 'SETUP: Validate JMeter Docker Image'
  inputs:
    azureSubscription: $(AZURE_SERVICE_CONNECTION_NAME)
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      az acr login -n $(TF_VAR_JMETER_ACR_NAME)
      docker pull $(TF_VAR_JMETER_DOCKER_IMAGE)

- task: AzureCLI@2
  displayName: 'SETUP: Prepare Terraform Credentials'
  inputs:
    azureSubscription: $(AZURE_SERVICE_CONNECTION_NAME)
    scriptType: bash
    scriptLocation: inlineScript
    addSpnToEnvironment: true
    inlineScript: |
      echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$servicePrincipalId"
      echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$servicePrincipalKey"
      echo "##vso[task.setvariable variable=ARM_TENANT_ID]$tenantId"
      echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$AZURE_SUBSCRIPTION_ID"

- script: |
    wget https://releases.hashicorp.com/terraform/$(TERRAFORM_VERSION)/terraform_$(TERRAFORM_VERSION)_linux_amd64.zip
    unzip terraform_$(TERRAFORM_VERSION)_linux_amd64.zip
    sudo mv ./terraform  /usr/local/bin
  workingDirectory: $(Agent.TempDirectory)
  displayName: 'SETUP: Install Terraform'

- script: terraform init
  workingDirectory: ./terraform2
  displayName: 'SETUP: Run Terraform Init'

- script: terraform import azurerm_resource_group.jmeter_rg /subscriptions/${AZURE_SUBSCRIPTION_ID}/resourceGroups/${TF_VAR_JMETER_ACR_RESOURCE_GROUP_NAME}
  workingDirectory: ./terraform2
  displayName: 'Importing existing Resource Group to terraform'

- script: terraform apply -target azurerm_storage_share.jmeter_share -auto-approve
  workingDirectory: ./terraform2
  displayName: 'SETUP: Run Terraform Apply (target=file share)'

- script: terraform apply -auto-approve
  workingDirectory: ./terraform2
  displayName: 'SETUP: Run Terraform Apply (target=all)'

- script: terraform state rm azurerm_resource_group.jmeter_rg
  condition: always()
  workingDirectory: ./terraform2
  displayName: 'Removing Resource Group from the TF State'

- script: terraform destroy -auto-approve
  workingDirectory: ./terraform2
  displayName: 'TEARDOWN: Run Terraform Destroy'
